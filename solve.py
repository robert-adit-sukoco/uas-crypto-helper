from galois import GF

# metode slide
def gmul(a, b):
    p = 0
    while b:
        if b & 1:
            p ^= a
        a <<= 1
        if a & 0x100:
            a ^= 0x11B
        b >>= 1

    return p


a = 0x57
b = 0x83
print(hex(gmul(a, b)))  # 0xc1

# metode sage
from sage.all import *


def hex_to_poly(num, F):
    res = 0
    x = F.gen()
    print(x, "gen")
    i = 0
    while num > 0:
        if num & 1:
            res += x**i
        num >>= 1
        i += 1
    return res


x = PolynomialRing(GF(2), "x").gen()
assert (x**8 + x**4 + x**3 + x + 1).is_irreducible()
F = GF(2**8, x, modulus=x**8 + x**4 + x**3 + x + 1)

a = hex_to_poly(0x57, F)
b = hex_to_poly(0x83, F)

print(a * b)

# answer for question
print("cara 1", hex(gmul(0x2, 0xAB) ^ gmul(0x3, 0x34) ^ gmul(0x1, 0x56) ^ gmul(0x1, 0x78)))

c1 = hex_to_poly(0x1, F)
c2 = hex_to_poly(0x2, F)
c3 = hex_to_poly(0x3, F)
a = hex_to_poly(0xAB, F)
b = hex_to_poly(0x34, F)
c = hex_to_poly(0x56, F)
d = hex_to_poly(0x78, F)

print("cara 2", c2 * a + c3 * b + c + d)

"""### Question 3"""

R = PolynomialRing(GF(2), "x")


# return d,x,y such that d = gcd(a,b) and d = ax + by
def egcd(a, b):
    x2, x1, y2, y1 = 1, 0, 0, 1
    while b > 0:
        q, r = a // b, a % b
        x, y = x2 - q * x1, y2 - q * y1
        a, b, x2, x1, y2, y1 = b, r, x1, x, y1, y
        print(f"{q} | {r} | {x} | {y} | {a} | {b} | {x2} | {x1} | {y2} | {y1}")

    return (a, x2, y2)


# print(egcd(1759, 550))

# print()
a = hex_to_poly(0x2B, R)
b = hex_to_poly(0x43, R)
print(egcd(a, b))

F = GF(2**6, x, modulus=x**6 + x + 1)

a = hex_to_poly(0x2B, F)

# inverse of a
print(a ** -1)

x = F.gen()
for i in range(64):
    print(i, x ** i)

a = hex_to_poly(32, F)
b = hex_to_poly(43, F)
print(a / b)

"""### Question 4"""

def compute_IP(plaintext):
    plaintext_list = list(bin(int(plaintext, 16))[2:].zfill(64))
    permute = ""

    IP = [58, 50, 42, 34, 26, 18, 10, 2,
        60, 52, 44, 36, 28, 20, 12, 4,
        62, 54, 46, 38, 30, 22, 14, 6,
        64, 56, 48, 40, 32, 24, 16, 8,
        57, 49, 41, 33, 25, 17, 9, 1,
        59, 51, 43, 35, 27, 19, 11, 3,
        61, 53, 45, 37, 29, 21, 13, 5,
        63, 55, 47, 39, 31, 23, 15, 7]

    for i in IP:
        permute += plaintext_list[i - 1]

    return permute


plaintext = "ABABCDCDEFEF0202"
permute = ""
# compute IP

print("bin", permute)
print("hex", hex(int(permute, 2)))

"""### Question 5"""

# https://www.youtube.com/watch?v=gP4PqVGudtg
sbox = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

rcon = [
    0x01,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x40,
    0x80,
    0x1B,
    0x36,
]

def rotword(word):
    return word[1:] + word[:1]


def subword(word):
    return [sbox[i] for i in word]


def xor(a, b):
    return [a[i] ^ b[i] for i in range(len(a))]

def key_expansion(key):
    key_schedule = []
    for i in range(4):
        key_schedule.append(key[i])
    for i in range(4, 4 * 11):
        temp = key_schedule[i - 1]
        if i % 4 == 0:
            temp = xor(subword(rotword(temp)), [rcon[i // 4 - 1], 0, 0, 0])
        key_schedule.append(xor(key_schedule[i - 4], temp))
    return key_schedule

key = [
    [0xAA, 0xAA, 0xAA, 0xAA],
    [0xBB, 0xBB, 0xBB, 0xBB],
    [0xCC, 0xCC, 0xCC, 0xCC],
    [0xDD, 0xDD, 0xDD, 0xDD],
]
for key in key_expansion(key)[4:8]:
    print([hex(i) for i in key])
    print()

x = PolynomialRing(GF(2), "x").gen()

f = x**2 + 1
print(f.is_irreducible())
print(f.factor())

f = x**2 + x + 1
print(f.is_irreducible())
print(f.factor())